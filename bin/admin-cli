#!/usr/bin/env php
<?php
//namespace InterpretersOffice;
/**
 * rought draft of a command-line tool for initial database setup.
 *
 * assumes database exists and Doctrine has been configured
 *
 * @todo move CreateAdminUserCommand to its own file
 *
 */
require __DIR__.'/../vendor/autoload.php';

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\Question;
use Symfony\Component\Console\Question\ChoiceQuestion;

use Symfony\Component\Console\Style\SymfonyStyle;

use Doctrine\ORM\Tools\Console\Command\SchemaTool\CreateCommand as CreateSchemaCommand;

use Laminas\Validator\EmailAddress as EmailValidator;

use InterpretersOffice\Entity;
use Symfony\Component\Console\Input\InputArgument;

/* ---------------------------------------------------------------------- */

class LoadInitialDataCommand extends Command
{
     protected function configure()
    {
        $this
        // the name of the command (the part after "bin/console")
        ->setName('setup:load-initial-data')
        // the short description shown while running "php bin/console list"
        ->setDescription('inserts essential data into the database')
        // the full command description shown when running the command with
        // the "--help" option
        ->setHelp('inserts some essential data that is required in order to run the application');
    }
    /**
     * loads the required initial data
     *
     * @param InputInterface $input
     * @param OutputInterface $output
     * @throws \Exception
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {

        $io = new SymfonyStyle($input,$output);
        try {
            //$command = new CreateSchemaCommand();
            //$command->execute($input,$output); // nice try.
            $entityManager = require __DIR__.'/../config/doctrine-bootstrap.php';
            $connection = $entityManager->getConnection();
            $sql_file = trim(file_get_contents(__DIR__ . '/sql/initial-data.sql'));
            if (false === $sql_file) {
                throw new \Exception("sorry, could not read initial-data.sql file");
            }
            $queries = explode(';',rtrim($sql_file,';'));
            foreach ($queries as $q) {
               $connection->exec($q);
            }
            $io->success("Required initial data loaded successfully.");
            return 0;
        } catch (\Exception $e) {
            $io->error("Sorry! caught exception: ".$e->getMessage());
            return 1;
        }
    }
}


class ClearCacheCommand extends Command
{

    protected function configure()
    {
        $this->setName("admin:clear-cache")
            ->setDescription("clears Doctrine filesystem (really) and application configuration caches (really)")
            ->setHelp("not much to it, just do it");

    }
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $io = new SymfonyStyle($input,$output);
        $path = dirname(__FILE__).'/../data/DoctrineModule/cache/*';
        system("rm -r $path", $exit_status);
        if ("0" != $exit_status) {
            $io->error("could not clear filesystem cache (maybe it was empty)");
            //return 1;
        } else {
            $io->success("Successfully cleared Doctrine filesystem cache.");
        }
        $path = dirname(__FILE__).'/../data/cache/*';
        system("rm -rf $path", $exit_status);
        if ("0" != $exit_status) {
            $io->error("could not clear app configuration cache");
            //return 1;
        } else {
            $io->success("Successfully cleared configuration cache.");
        }
        return 0;
    }
}

class SetPasswordCommand extends Command {
    protected function configure()
    {
        $this
        // the name of the command (the part after "bin/console")
        ->setName('admin:user-password')
        // the short description shown while running "php bin/console list"
        ->setDescription('sets a password')
        // the full command description shown when running the command with
        // the "--help" option
        ->setHelp('sets the password for a user');

        $this->addArgument('user', InputArgument::REQUIRED, 'the username of the user');
        $this->addArgument('password', InputArgument::REQUIRED, 'password to be set for user');
    }

    protected function execute(InputInterface $input, OutputInterface $output)    
    {
        /** @var \Doctrine\ORM\EntityManager $entityClass */
        $entityManager = require __DIR__.'/../config/doctrine-bootstrap.php';
        /** Doctrine\DBAL\Connection $dbal */
        $dbal = $entityManager->getConnection();
        $user = $input->getArgument('user');
        $password = \password_hash($input->getArgument('password'),PASSWORD_DEFAULT);
        $affected = $dbal->executeUpdate('UPDATE users SET password = :password WHERE username = :username',
            ['password'=>$password,'username'=>$user]
        );
        $io = new SymfonyStyle($input,$output);
        if (! $affected) {
            $io->warning("no such user found in the database: $user");
        } else {
            $io->success("password has been set for user $user");
        }

        
        return 0;
    }
}

class CreateAdminUserCommand extends Command
{
    protected function configure()
    {
        $this
        // the name of the command (the part after "bin/console")
        ->setName('setup:create-admin-user')
        // the short description shown while running "php bin/console list"
        ->setDescription('creates an initial administrative user')
        // the full command description shown when running the command with
        // the "--help" option
        ->setHelp('creates an initial administrative user')
        ->setDefinition(new \Symfony\Component\Console\Input\InputDefinition(
                [
                    new \Symfony\Component\Console\Input\InputOption('no-prompt')
                ]
         ));
    }

    /**
     * ugly temporary helper for wrapping shit in <question> tags
     *
     * written before we read https://symfony.com/doc/current/console/style.html
     *
     * @param type $string
     * @return string
     */
    protected function q($string)
    {
        return '<question>'.$string.'</question>';
    }


    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $io = new SymfonyStyle($input,$output);
        try {
            $entityManager = require __DIR__.'/../config/doctrine-bootstrap.php';
            $admin_users = $entityManager
                    ->createQuery('SELECT u FROM InterpretersOffice\Entity\User u JOIN u.role r WHERE r.name =\'administrator\'')
                    ->getResult();
        } catch (\Exception $e) {
            $io->error([
                sprintf('Exception %s encountered with error message: ',get_class($e)),
                $e->getMessage(),
                'Please check your configuration and try again.'

            ]);
            return;
        }
        try
        {
            $role = $entityManager->createQuery('SELECT r FROM InterpretersOffice\Entity\Role r WHERE r.name = :name')
                ->setParameters([':name'=>'administrator'])
                ->getSingleResult();

            $hats = $entityManager->createQuery('SELECT h FROM  InterpretersOffice\Entity\Hat h INDEX BY h.id WHERE h.id < 3')->getResult();
            if (! $hats) {
                throw new \Doctrine\ORM\NoResultException();
            }

        } catch (\Doctrine\ORM\NoResultException $e) {
           return $io->error("Initial database setup does not seem to have been completed. Please run [something] and then try again.");
        } catch (\Exception $e) {
            $io->error(sprintf("Error: %s exception was encountered while querying database. Please check your configuration."));
        }
        if ($input->getOption('no-prompt')) {
            // non-interactive, just defaults
            $username = 'david';
            $pwd1 = 'boink';
            $hat = $hats[1];
            $firstname = 'David';
            $lastname='Mintz';
            $email = 'david@davidmintz.org';
            $entityClass= Entity\Interpreter::class;

        } else { // ask the questions

            /**
            if ($admin_users) {
                return $io->error("An administrative user has already been set up. Please use the web interface for user management.");
            }
            */
            $helper = $this->getHelper('question');

            $question_username = new Question($this->q('Please enter this administrative user\'s username: ')
                    ,'david'
            );

            $username = '';
            while (! $username )
            {
                $username = trim($helper->ask($input, $output, $question_username));
            }

            $question_password = new Question($this->q('Please enter this administrative user\'s password: ')
                    ,'boink'
            );
            $validator = function($value){
                if (trim($value == '')) {
                    throw new \RuntimeException("password is required");
                }
                return $value;
            };
            $question_confirm_password = new Question($this->q('Confirm administrative user\'s password: '),
                    'boink'
             );

            $question_password->setValidator($validator)->setHidden(true);
            $question_confirm_password->setHidden(true);

            $pwd1 = $helper->ask($input, $output, $question_password);
            $pwd2 = $helper->ask($input, $output, $question_confirm_password);

            while ($pwd1 != $pwd2) {
                $output->writeln("<error>passwords do not match. once again...</error>");
                $pwd1 = $helper->ask($input, $output, $question_password);
                $pwd2 = $helper->ask($input, $output, $question_confirm_password);
            }

            $hat_choices = [
                   1 => 'staff Court Interpreter',
                   2 => 'other member of the Court Interpreters Office staff'
            ];

            $hat_question = new ChoiceQuestion(
            $this->q('Choose the most appropriate "Hat" for this admin user [default: staff Court Interpreter]'),
                    $hat_choices,
                    1
            );
            $hat_string = $helper->ask($input, $output,$hat_question);
            $hat_id =  array_flip($hat_choices)[$hat_string];
            $hat = $hats[$hat_id];

            $firstname = $helper->ask($input,$output,new Question($this->q("user's first name? ")
                    // ,'David'
             ));
            $lastname = $helper->ask($input,$output,new Question($this->q("user's last name? ") //, 'Mintz'
            ));

            $email =  trim($helper->ask($input,$output,new Question($this->q("user's email address? ")// ,'david@davidmintz.org'
                    )));

            $email_validator = new EmailValidator();

            while (! $email_validator->isValid($email)) {
                $output->writeln("<error>$email is not a valid email address. Please try again...</error>");
                $helper->ask($input,$output,new Question($this->q("user's email address? ")));
            }
            $entityClass= $hat_id == 1 ? Entity\Interpreter::class : Entity\Person::class;

        }

        // check if the person exists
        $person = $entityManager->getRepository($entityClass)
                        ->findOneBy(['email'=> $email]);
        if (! $person) {
            $person = new $entityClass;
        }

        $person->setFirstname($firstname)
                ->setLastname($lastname)
                ->setEmail($email);
        $person->setHat($hat);

        $user = new Entity\User();

        $user
            ->setUsername($username)
            ->setPassword($pwd1)
            ->setActive(true)
            ->setRole($role)
            ->setPerson($person)
            ->setCreated(new \DateTime());

        $entityManager->persist($person);
        $entityManager->persist($user);
        $entityManager->flush();

        $io->success("Initial admin user has been created.");

    }
}


$application = new Application();
$application->add(new CreateAdminUserCommand);
$application->add(new LoadInitialDataCommand);
$application->add($cmd = new CreateSchemaCommand);
$cmd->setDescription("runs the Doctrine orm:schema-create command directly against your database");
$application->add(new ClearCacheCommand);
$application->add(new SetPasswordCommand());
$application->run();
